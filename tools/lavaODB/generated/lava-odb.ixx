// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // SourceLval
  //

  inline
  access::object_traits< ::SourceLval >::id_type
  access::object_traits< ::SourceLval >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::SourceLval >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::SourceLval >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // LabelSet
  //

  inline
  access::object_traits< ::LabelSet >::id_type
  access::object_traits< ::LabelSet >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::LabelSet >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::LabelSet >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Dua
  //

  inline
  access::object_traits< ::Dua >::id_type
  access::object_traits< ::Dua >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Dua >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Dua >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // DuaBytes
  //

  inline
  access::object_traits< ::DuaBytes >::id_type
  access::object_traits< ::DuaBytes >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::DuaBytes >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DuaBytes >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AttackPoint
  //

  inline
  access::object_traits< ::AttackPoint >::id_type
  access::object_traits< ::AttackPoint >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::AttackPoint >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::AttackPoint >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Bug
  //

  inline
  access::object_traits< ::Bug >::id_type
  access::object_traits< ::Bug >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Bug >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Bug >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BugLval
  //

  inline
  void access::view_traits< ::BugLval >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Build
  //

  inline
  access::object_traits< ::Build >::id_type
  access::object_traits< ::Build >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Build >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Build >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Run
  //

  inline
  access::object_traits< ::Run >::id_type
  access::object_traits< ::Run >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Run >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Run >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SourceFunction
  //

  inline
  access::object_traits< ::SourceFunction >::id_type
  access::object_traits< ::SourceFunction >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::SourceFunction >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::SourceFunction >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Call
  //

  inline
  access::object_traits< ::Call >::id_type
  access::object_traits< ::Call >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Call >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Call >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // Loc
  //

  inline
  bool access::composite_value_traits< ::Loc, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.line_null;
    r = r && i.column_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::Loc, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.line_null = true;
    i.column_null = true;
  }

  // LavaASTLoc
  //

  inline
  bool access::composite_value_traits< ::LavaASTLoc, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.filename_null;
    r = r && composite_value_traits< ::Loc, id_pgsql >::get_null (i.begin_value);
    r = r && composite_value_traits< ::Loc, id_pgsql >::get_null (i.end_value);
    return r;
  }

  inline
  void access::composite_value_traits< ::LavaASTLoc, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.filename_null = true;
    composite_value_traits< ::Loc, id_pgsql >::set_null (i.begin_value, sk);
    composite_value_traits< ::Loc, id_pgsql >::set_null (i.end_value, sk);
  }

  // Range
  //

  inline
  bool access::composite_value_traits< ::Range, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.low_null;
    r = r && i.high_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::Range, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.low_null = true;
    i.high_null = true;
  }

  // SourceLval
  //

  inline
  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // LabelSet
  //

  inline
  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Dua
  //

  inline
  void access::object_traits_impl< ::Dua, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // DuaBytes
  //

  inline
  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // AttackPoint
  //

  inline
  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Bug
  //

  inline
  void access::object_traits_impl< ::Bug, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::Bug, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // BugLval
  //

  // Build
  //

  inline
  void access::object_traits_impl< ::Build, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Run
  //

  inline
  void access::object_traits_impl< ::Run, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::Run, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // SourceFunction
  //

  inline
  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Call
  //

  inline
  void access::object_traits_impl< ::Call, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::Call, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }
}

