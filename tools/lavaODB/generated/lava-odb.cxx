// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

// Begin prologue.
//
#include "pgarray.hxx"
//
// End prologue.

#include <odb/pre.hxx>

#include "lava-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/view-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/prepared-query.hxx>
#include <odb/pgsql/simple-object-result.hxx>
#include <odb/pgsql/view-result.hxx>

namespace odb
{
  // Loc
  //

  bool access::composite_value_traits< ::Loc, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // line
    //
    t[0UL] = 0;

    // column
    //
    t[1UL] = 0;

    return grew;
  }

  void access::composite_value_traits< ::Loc, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // line
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.line_value;
    b[n].is_null = &i.line_null;
    n++;

    // column
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.column_value;
    b[n].is_null = &i.column_null;
    n++;
  }

  bool access::composite_value_traits< ::Loc, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // line
    //
    {
      ::uint32_t const& v =
        o.line;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.line_value, is_null, v);
      i.line_null = is_null;
    }

    // column
    //
    {
      ::uint32_t const& v =
        o.column;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.column_value, is_null, v);
      i.column_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::Loc, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // line
    //
    {
      ::uint32_t& v =
        o.line;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.line_value,
        i.line_null);
    }

    // column
    //
    {
      ::uint32_t& v =
        o.column;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.column_value,
        i.column_null);
    }
  }

  // LavaASTLoc
  //

  bool access::composite_value_traits< ::LavaASTLoc, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // filename
    //
    if (t[0UL])
    {
      i.filename_value.capacity (i.filename_size);
      grew = true;
    }

    // begin
    //
    if (composite_value_traits< ::Loc, id_pgsql >::grow (
          i.begin_value, t + 1UL))
      grew = true;

    // end
    //
    if (composite_value_traits< ::Loc, id_pgsql >::grow (
          i.end_value, t + 3UL))
      grew = true;

    return grew;
  }

  void access::composite_value_traits< ::LavaASTLoc, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // filename
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.filename_value.data ();
    b[n].capacity = i.filename_value.capacity ();
    b[n].size = &i.filename_size;
    b[n].is_null = &i.filename_null;
    n++;

    // begin
    //
    composite_value_traits< ::Loc, id_pgsql >::bind (
      b + n, i.begin_value, sk);
    n += 2UL;

    // end
    //
    composite_value_traits< ::Loc, id_pgsql >::bind (
      b + n, i.end_value, sk);
    n += 2UL;
  }

  bool access::composite_value_traits< ::LavaASTLoc, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // filename
    //
    {
      ::std::string const& v =
        o.filename;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.filename_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.filename_value,
        size,
        is_null,
        v);
      i.filename_null = is_null;
      i.filename_size = size;
      grew = grew || (cap != i.filename_value.capacity ());
    }

    // begin
    //
    {
      ::Loc const& v =
        o.begin;

      composite_value_traits< ::Loc, id_pgsql >::init (
        i.begin_value,
        v,
        sk);
    }

    // end
    //
    {
      ::Loc const& v =
        o.end;

      composite_value_traits< ::Loc, id_pgsql >::init (
        i.end_value,
        v,
        sk);
    }

    return grew;
  }

  void access::composite_value_traits< ::LavaASTLoc, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // filename
    //
    {
      ::std::string& v =
        o.filename;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.filename_value,
        i.filename_size,
        i.filename_null);
    }

    // begin
    //
    {
      ::Loc& v =
        o.begin;

      composite_value_traits< ::Loc, id_pgsql >::init (
        v,
        i.begin_value,
        db);
    }

    // end
    //
    {
      ::Loc& v =
        o.end;

      composite_value_traits< ::Loc, id_pgsql >::init (
        v,
        i.end_value,
        db);
    }
  }

  // Range
  //

  bool access::composite_value_traits< ::Range, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // low
    //
    t[0UL] = 0;

    // high
    //
    t[1UL] = 0;

    return grew;
  }

  void access::composite_value_traits< ::Range, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // low
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.low_value;
    b[n].is_null = &i.low_null;
    n++;

    // high
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.high_value;
    b[n].is_null = &i.high_null;
    n++;
  }

  bool access::composite_value_traits< ::Range, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // low
    //
    {
      ::uint32_t const& v =
        o.low;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.low_value, is_null, v);
      i.low_null = is_null;
    }

    // high
    //
    {
      ::uint32_t const& v =
        o.high;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.high_value, is_null, v);
      i.high_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::Range, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // low
    //
    {
      ::uint32_t& v =
        o.low;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.low_value,
        i.low_null);
    }

    // high
    //
    {
      ::uint32_t& v =
        o.high;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.high_value,
        i.high_null);
    }
  }

  // SourceLval
  //

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::
  persist_statement_name[] = "persist_sourcelval";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::
  find_statement_name[] = "find_sourcelval";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::
  update_statement_name[] = "update_sourcelval";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::
  erase_statement_name[] = "erase_sourcelval";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::
  query_statement_name[] = "query_sourcelval";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::
  erase_query_statement_name[] = "erase_query_sourcelval";

  const unsigned int access::object_traits_impl< ::SourceLval, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int4_oid
  };

  const unsigned int access::object_traits_impl< ::SourceLval, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::SourceLval, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::SourceLval, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::SourceLval, id_pgsql >::id_type
  access::object_traits_impl< ::SourceLval, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::SourceLval, id_pgsql >::id_type
  access::object_traits_impl< ::SourceLval, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::SourceLval, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // loc
    //
    if (composite_value_traits< ::LavaASTLoc, id_pgsql >::grow (
          i.loc_value, t + 1UL))
      grew = true;

    // ast_name
    //
    if (t[6UL])
    {
      i.ast_name_value.capacity (i.ast_name_size);
      grew = true;
    }

    // len_bytes
    //
    t[7UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // loc
    //
    composite_value_traits< ::LavaASTLoc, id_pgsql >::bind (
      b + n, i.loc_value, sk);
    n += 5UL;

    // ast_name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.ast_name_value.data ();
    b[n].capacity = i.ast_name_value.capacity ();
    b[n].size = &i.ast_name_size;
    b[n].is_null = &i.ast_name_null;
    n++;

    // len_bytes
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.len_bytes_value;
    b[n].is_null = &i.len_bytes_null;
    n++;
  }

  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::SourceLval, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // loc
    //
    {
      ::LavaASTLoc const& v =
        o.loc;

      if (composite_value_traits< ::LavaASTLoc, id_pgsql >::init (
            i.loc_value,
            v,
            sk))
        grew = true;
    }

    // ast_name
    //
    {
      ::std::string const& v =
        o.ast_name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ast_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.ast_name_value,
        size,
        is_null,
        v);
      i.ast_name_null = is_null;
      i.ast_name_size = size;
      grew = grew || (cap != i.ast_name_value.capacity ());
    }

    // len_bytes
    //
    {
      ::uint32_t const& v =
        o.len_bytes;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.len_bytes_value, is_null, v);
      i.len_bytes_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // loc
    //
    {
      ::LavaASTLoc& v =
        o.loc;

      composite_value_traits< ::LavaASTLoc, id_pgsql >::init (
        v,
        i.loc_value,
        db);
    }

    // ast_name
    //
    {
      ::std::string& v =
        o.ast_name;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.ast_name_value,
        i.ast_name_size,
        i.ast_name_null);
    }

    // len_bytes
    //
    {
      ::uint32_t& v =
        o.len_bytes;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.len_bytes_value,
        i.len_bytes_null);
    }
  }

  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::persist_statement[] =
  "INSERT INTO \"sourcelval\" "
  "(\"id\", "
  "\"loc_filename\", "
  "\"loc_begin_line\", "
  "\"loc_begin_column\", "
  "\"loc_end_line\", "
  "\"loc_end_column\", "
  "\"ast_name\", "
  "\"len_bytes\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::find_statement[] =
  "SELECT "
  "\"sourcelval\".\"id\", "
  "\"sourcelval\".\"loc_filename\", "
  "\"sourcelval\".\"loc_begin_line\", "
  "\"sourcelval\".\"loc_begin_column\", "
  "\"sourcelval\".\"loc_end_line\", "
  "\"sourcelval\".\"loc_end_column\", "
  "\"sourcelval\".\"ast_name\", "
  "\"sourcelval\".\"len_bytes\" "
  "FROM \"sourcelval\" "
  "WHERE \"sourcelval\".\"id\"=$1";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::update_statement[] =
  "UPDATE \"sourcelval\" "
  "SET "
  "\"loc_filename\"=$1, "
  "\"loc_begin_line\"=$2, "
  "\"loc_begin_column\"=$3, "
  "\"loc_end_line\"=$4, "
  "\"loc_end_column\"=$5, "
  "\"ast_name\"=$6, "
  "\"len_bytes\"=$7 "
  "WHERE \"id\"=$8";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::erase_statement[] =
  "DELETE FROM \"sourcelval\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::query_statement[] =
  "SELECT "
  "\"sourcelval\".\"id\", "
  "\"sourcelval\".\"loc_filename\", "
  "\"sourcelval\".\"loc_begin_line\", "
  "\"sourcelval\".\"loc_begin_column\", "
  "\"sourcelval\".\"loc_end_line\", "
  "\"sourcelval\".\"loc_end_column\", "
  "\"sourcelval\".\"ast_name\", "
  "\"sourcelval\".\"len_bytes\" "
  "FROM \"sourcelval\"";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"sourcelval\"";

  const char access::object_traits_impl< ::SourceLval, id_pgsql >::table_name[] =
  "\"sourcelval\"";

  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::SourceLval, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::SourceLval, id_pgsql >::pointer_type
  access::object_traits_impl< ::SourceLval, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::SourceLval, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::SourceLval, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::SourceLval, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::SourceLval, id_pgsql >::object_type >
  access::object_traits_impl< ::SourceLval, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::SourceLval, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::SourceLval, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        false,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::SourceLval, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // LabelSet
  //

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::
  persist_statement_name[] = "persist_labelset";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::
  find_statement_name[] = "find_labelset";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::
  update_statement_name[] = "update_labelset";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::
  erase_statement_name[] = "erase_labelset";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::
  query_statement_name[] = "query_labelset";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::
  erase_query_statement_name[] = "erase_query_labelset";

  const unsigned int access::object_traits_impl< ::LabelSet, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::LabelSet, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::LabelSet, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::LabelSet, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::LabelSet, id_pgsql >::id_type
  access::object_traits_impl< ::LabelSet, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::LabelSet, id_pgsql >::id_type
  access::object_traits_impl< ::LabelSet, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::LabelSet, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // ptr
    //
    t[1UL] = 0;

    // inputfile
    //
    if (t[2UL])
    {
      i.inputfile_value.capacity (i.inputfile_size);
      grew = true;
    }

    // labels
    //
    if (t[3UL])
    {
      i.labels_value.capacity (i.labels_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // ptr
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.ptr_value;
    b[n].is_null = &i.ptr_null;
    n++;

    // inputfile
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.inputfile_value.data ();
    b[n].capacity = i.inputfile_value.capacity ();
    b[n].size = &i.inputfile_size;
    b[n].is_null = &i.inputfile_null;
    n++;

    // labels
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.labels_value.data ();
    b[n].capacity = i.labels_value.capacity ();
    b[n].size = &i.labels_size;
    b[n].is_null = &i.labels_null;
    n++;
  }

  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::LabelSet, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // ptr
    //
    {
      ::uint64_t const& v =
        o.ptr;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.ptr_value, is_null, v);
      i.ptr_null = is_null;
    }

    // inputfile
    //
    {
      ::std::string const& v =
        o.inputfile;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.inputfile_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.inputfile_value,
        size,
        is_null,
        v);
      i.inputfile_null = is_null;
      i.inputfile_size = size;
      grew = grew || (cap != i.inputfile_value.capacity ());
    }

    // labels
    //
    {
      ::std::vector< unsigned int > const& v =
        o.labels;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.labels_value.capacity ());
      pgsql::value_traits<
          ::std::vector< unsigned int >,
          pgsql::id_string >::set_image (
        i.labels_value,
        size,
        is_null,
        v);
      i.labels_null = is_null;
      i.labels_size = size;
      grew = grew || (cap != i.labels_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // ptr
    //
    {
      ::uint64_t& v =
        o.ptr;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.ptr_value,
        i.ptr_null);
    }

    // inputfile
    //
    {
      ::std::string& v =
        o.inputfile;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.inputfile_value,
        i.inputfile_size,
        i.inputfile_null);
    }

    // labels
    //
    {
      ::std::vector< unsigned int >& v =
        o.labels;

      pgsql::value_traits<
          ::std::vector< unsigned int >,
          pgsql::id_string >::set_value (
        v,
        i.labels_value,
        i.labels_size,
        i.labels_null);
    }
  }

  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::persist_statement[] =
  "INSERT INTO \"labelset\" "
  "(\"id\", "
  "\"ptr\", "
  "\"inputfile\", "
  "\"labels\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3::INTEGER[]) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::find_statement[] =
  "SELECT "
  "\"labelset\".\"id\", "
  "\"labelset\".\"ptr\", "
  "\"labelset\".\"inputfile\", "
  "\"labelset\".\"labels\"::TEXT "
  "FROM \"labelset\" "
  "WHERE \"labelset\".\"id\"=$1";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::update_statement[] =
  "UPDATE \"labelset\" "
  "SET "
  "\"ptr\"=$1, "
  "\"inputfile\"=$2, "
  "\"labels\"=$3::INTEGER[] "
  "WHERE \"id\"=$4";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::erase_statement[] =
  "DELETE FROM \"labelset\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::query_statement[] =
  "SELECT "
  "\"labelset\".\"id\", "
  "\"labelset\".\"ptr\", "
  "\"labelset\".\"inputfile\", "
  "\"labelset\".\"labels\"::TEXT "
  "FROM \"labelset\"";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"labelset\"";

  const char access::object_traits_impl< ::LabelSet, id_pgsql >::table_name[] =
  "\"labelset\"";

  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::LabelSet, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::LabelSet, id_pgsql >::pointer_type
  access::object_traits_impl< ::LabelSet, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::LabelSet, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::LabelSet, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::LabelSet, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::LabelSet, id_pgsql >::object_type >
  access::object_traits_impl< ::LabelSet, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::LabelSet, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::LabelSet, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        false,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::LabelSet, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // Dua
  //

  const char access::object_traits_impl< ::Dua, id_pgsql >::
  persist_statement_name[] = "persist_dua";

  const char access::object_traits_impl< ::Dua, id_pgsql >::
  find_statement_name[] = "find_dua";

  const char access::object_traits_impl< ::Dua, id_pgsql >::
  update_statement_name[] = "update_dua";

  const char access::object_traits_impl< ::Dua, id_pgsql >::
  erase_statement_name[] = "erase_dua";

  const char access::object_traits_impl< ::Dua, id_pgsql >::
  query_statement_name[] = "query_dua";

  const char access::object_traits_impl< ::Dua, id_pgsql >::
  erase_query_statement_name[] = "erase_query_dua";

  const unsigned int access::object_traits_impl< ::Dua, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::bool_oid
  };

  const unsigned int access::object_traits_impl< ::Dua, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::Dua, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::bool_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::SourceLval,
    id_pgsql,
    access::object_traits_impl< ::Dua, id_pgsql >::lval_tag>::
  table_name[] = "\"lval\"";

  struct access::object_traits_impl< ::Dua, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< viable_bytes_traits > viable_bytes;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : viable_bytes (c, id, idn, idt)
    {
    }
  };

  // viable_bytes
  //

  const char access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  select_name[] = "select_dua_viable_bytes";

  const char access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  insert_name[] = "insert_dua_viable_bytes";

  const char access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  delete_name[] = "delete_dua_viable_bytes";

  const unsigned int access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const char access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  select_statement[] =
  "SELECT "
  "\"dua_viable_bytes\".\"index\", "
  "\"dua_viable_bytes\".\"value\" "
  "FROM \"dua_viable_bytes\" "
  "WHERE \"dua_viable_bytes\".\"object_id\"=$1 ORDER BY \"dua_viable_bytes\".\"index\"";

  const char access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  insert_statement[] =
  "INSERT INTO \"dua_viable_bytes\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value\") "
  "VALUES "
  "($1, $2, $3)";

  const char access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  delete_statement[] =
  "DELETE FROM \"dua_viable_bytes\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    t[1UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      typedef object_traits< ::LabelSet > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.value_value, is_null, id);
        i.value_null = is_null;
      }
      else
        i.value_null = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      typedef object_traits< ::LabelSet > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::viable_bytes_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::Dua, id_pgsql >::id_type
  access::object_traits_impl< ::Dua, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::Dua, id_pgsql >::id_type
  access::object_traits_impl< ::Dua, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Dua, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // lval
    //
    t[1UL] = 0;

    // byte_tcn
    //
    if (t[2UL])
    {
      i.byte_tcn_value.capacity (i.byte_tcn_size);
      grew = true;
    }

    // all_labels
    //
    if (t[3UL])
    {
      i.all_labels_value.capacity (i.all_labels_size);
      grew = true;
    }

    // inputfile
    //
    if (t[4UL])
    {
      i.inputfile_value.capacity (i.inputfile_size);
      grew = true;
    }

    // max_tcn
    //
    t[5UL] = 0;

    // max_cardinality
    //
    t[6UL] = 0;

    // instr
    //
    t[7UL] = 0;

    // fake_dua
    //
    t[8UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // lval
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.lval_value;
    b[n].is_null = &i.lval_null;
    n++;

    // byte_tcn
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.byte_tcn_value.data ();
    b[n].capacity = i.byte_tcn_value.capacity ();
    b[n].size = &i.byte_tcn_size;
    b[n].is_null = &i.byte_tcn_null;
    n++;

    // all_labels
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.all_labels_value.data ();
    b[n].capacity = i.all_labels_value.capacity ();
    b[n].size = &i.all_labels_size;
    b[n].is_null = &i.all_labels_null;
    n++;

    // inputfile
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.inputfile_value.data ();
    b[n].capacity = i.inputfile_value.capacity ();
    b[n].size = &i.inputfile_size;
    b[n].is_null = &i.inputfile_null;
    n++;

    // max_tcn
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.max_tcn_value;
    b[n].is_null = &i.max_tcn_null;
    n++;

    // max_cardinality
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.max_cardinality_value;
    b[n].is_null = &i.max_cardinality_null;
    n++;

    // instr
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.instr_value;
    b[n].is_null = &i.instr_null;
    n++;

    // fake_dua
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.fake_dua_value;
    b[n].is_null = &i.fake_dua_null;
    n++;
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Dua, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // lval
    //
    {
      ::SourceLval const* const& v =
        o.lval;

      typedef object_traits< ::SourceLval > obj_traits;
      typedef odb::pointer_traits< ::SourceLval const* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.lval_value, is_null, id);
        i.lval_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // byte_tcn
    //
    {
      ::std::vector< unsigned int > const& v =
        o.byte_tcn;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.byte_tcn_value.capacity ());
      pgsql::value_traits<
          ::std::vector< unsigned int >,
          pgsql::id_string >::set_image (
        i.byte_tcn_value,
        size,
        is_null,
        v);
      i.byte_tcn_null = is_null;
      i.byte_tcn_size = size;
      grew = grew || (cap != i.byte_tcn_value.capacity ());
    }

    // all_labels
    //
    {
      ::std::vector< unsigned int > const& v =
        o.all_labels;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.all_labels_value.capacity ());
      pgsql::value_traits<
          ::std::vector< unsigned int >,
          pgsql::id_string >::set_image (
        i.all_labels_value,
        size,
        is_null,
        v);
      i.all_labels_null = is_null;
      i.all_labels_size = size;
      grew = grew || (cap != i.all_labels_value.capacity ());
    }

    // inputfile
    //
    {
      ::std::string const& v =
        o.inputfile;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.inputfile_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.inputfile_value,
        size,
        is_null,
        v);
      i.inputfile_null = is_null;
      i.inputfile_size = size;
      grew = grew || (cap != i.inputfile_value.capacity ());
    }

    // max_tcn
    //
    {
      ::uint32_t const& v =
        o.max_tcn;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.max_tcn_value, is_null, v);
      i.max_tcn_null = is_null;
    }

    // max_cardinality
    //
    {
      ::uint32_t const& v =
        o.max_cardinality;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.max_cardinality_value, is_null, v);
      i.max_cardinality_null = is_null;
    }

    // instr
    //
    {
      ::uint64_t const& v =
        o.instr;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.instr_value, is_null, v);
      i.instr_null = is_null;
    }

    // fake_dua
    //
    {
      bool const& v =
        o.fake_dua;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.fake_dua_value, is_null, v);
      i.fake_dua_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // lval
    //
    {
      ::SourceLval const*& v =
        o.lval;

      typedef object_traits< ::SourceLval > obj_traits;
      typedef odb::pointer_traits< ::SourceLval const* > ptr_traits;

      if (i.lval_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.lval_value,
          i.lval_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // byte_tcn
    //
    {
      ::std::vector< unsigned int >& v =
        o.byte_tcn;

      pgsql::value_traits<
          ::std::vector< unsigned int >,
          pgsql::id_string >::set_value (
        v,
        i.byte_tcn_value,
        i.byte_tcn_size,
        i.byte_tcn_null);
    }

    // all_labels
    //
    {
      ::std::vector< unsigned int >& v =
        o.all_labels;

      pgsql::value_traits<
          ::std::vector< unsigned int >,
          pgsql::id_string >::set_value (
        v,
        i.all_labels_value,
        i.all_labels_size,
        i.all_labels_null);
    }

    // inputfile
    //
    {
      ::std::string& v =
        o.inputfile;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.inputfile_value,
        i.inputfile_size,
        i.inputfile_null);
    }

    // max_tcn
    //
    {
      ::uint32_t& v =
        o.max_tcn;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.max_tcn_value,
        i.max_tcn_null);
    }

    // max_cardinality
    //
    {
      ::uint32_t& v =
        o.max_cardinality;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.max_cardinality_value,
        i.max_cardinality_null);
    }

    // instr
    //
    {
      ::uint64_t& v =
        o.instr;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.instr_value,
        i.instr_null);
    }

    // fake_dua
    //
    {
      bool& v =
        o.fake_dua;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.fake_dua_value,
        i.fake_dua_null);
    }
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::Dua, id_pgsql >::persist_statement[] =
  "INSERT INTO \"dua\" "
  "(\"id\", "
  "\"lval\", "
  "\"byte_tcn\", "
  "\"all_labels\", "
  "\"inputfile\", "
  "\"max_tcn\", "
  "\"max_cardinality\", "
  "\"instr\", "
  "\"fake_dua\") "
  "VALUES "
  "(DEFAULT, $1, $2::INTEGER[], $3::INTEGER[], $4, $5, $6, $7, $8) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::Dua, id_pgsql >::find_statement[] =
  "SELECT "
  "\"dua\".\"id\", "
  "\"dua\".\"lval\", "
  "\"dua\".\"byte_tcn\"::TEXT, "
  "\"dua\".\"all_labels\"::TEXT, "
  "\"dua\".\"inputfile\", "
  "\"dua\".\"max_tcn\", "
  "\"dua\".\"max_cardinality\", "
  "\"dua\".\"instr\", "
  "\"dua\".\"fake_dua\" "
  "FROM \"dua\" "
  "WHERE \"dua\".\"id\"=$1";

  const char access::object_traits_impl< ::Dua, id_pgsql >::update_statement[] =
  "UPDATE \"dua\" "
  "SET "
  "\"lval\"=$1, "
  "\"byte_tcn\"=$2::INTEGER[], "
  "\"all_labels\"=$3::INTEGER[], "
  "\"inputfile\"=$4, "
  "\"max_tcn\"=$5, "
  "\"max_cardinality\"=$6, "
  "\"instr\"=$7, "
  "\"fake_dua\"=$8 "
  "WHERE \"id\"=$9";

  const char access::object_traits_impl< ::Dua, id_pgsql >::erase_statement[] =
  "DELETE FROM \"dua\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::Dua, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"dua\".\"id\",\n"
  "\"dua\".\"lval\",\n"
  "\"dua\".\"byte_tcn\"::TEXT,\n"
  "\"dua\".\"all_labels\"::TEXT,\n"
  "\"dua\".\"inputfile\",\n"
  "\"dua\".\"max_tcn\",\n"
  "\"dua\".\"max_cardinality\",\n"
  "\"dua\".\"instr\",\n"
  "\"dua\".\"fake_dua\"\n"
  "FROM \"dua\"\n"
  "LEFT JOIN \"sourcelval\" AS \"lval\" ON \"lval\".\"id\"=\"dua\".\"lval\"";

  const char access::object_traits_impl< ::Dua, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"dua\"";

  const char access::object_traits_impl< ::Dua, id_pgsql >::table_name[] =
  "\"dua\"";

  void access::object_traits_impl< ::Dua, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // viable_bytes
    //
    {
      ::std::vector< const ::LabelSet* > const& v =
        obj.viable_bytes;

      viable_bytes_traits::persist (
        v,
        esc.viable_bytes);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // viable_bytes
    //
    {
      ::std::vector< const ::LabelSet* > const& v =
        obj.viable_bytes;

      viable_bytes_traits::update (
        v,
        esc.viable_bytes);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // viable_bytes
    //
    viable_bytes_traits::erase (
      esc.viable_bytes);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Dua, id_pgsql >::pointer_type
  access::object_traits_impl< ::Dua, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Dua, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Dua, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Dua, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Dua, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // viable_bytes
    //
    {
      ::std::vector< const ::LabelSet* >& v =
        obj.viable_bytes;

      viable_bytes_traits::load (
        v,
        esc.viable_bytes);
    }
  }

  result< access::object_traits_impl< ::Dua, id_pgsql >::object_type >
  access::object_traits_impl< ::Dua, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Dua, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Dua, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        true,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Dua, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // DuaBytes
  //

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::
  persist_statement_name[] = "persist_duabytes";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::
  find_statement_name[] = "find_duabytes";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::
  update_statement_name[] = "update_duabytes";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::
  erase_statement_name[] = "erase_duabytes";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::
  query_statement_name[] = "query_duabytes";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::
  erase_query_statement_name[] = "erase_query_duabytes";

  const unsigned int access::object_traits_impl< ::DuaBytes, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::DuaBytes, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::DuaBytes, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::Dua,
    id_pgsql,
    access::object_traits_impl< ::DuaBytes, id_pgsql >::dua_tag>::
  table_name[] = "\"dua\"";

  struct access::object_traits_impl< ::DuaBytes, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::DuaBytes, id_pgsql >::id_type
  access::object_traits_impl< ::DuaBytes, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DuaBytes, id_pgsql >::id_type
  access::object_traits_impl< ::DuaBytes, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DuaBytes, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // dua
    //
    t[1UL] = 0;

    // selected
    //
    if (composite_value_traits< ::Range, id_pgsql >::grow (
          i.selected_value, t + 2UL))
      grew = true;

    // all_labels
    //
    if (t[4UL])
    {
      i.all_labels_value.capacity (i.all_labels_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // dua
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.dua_value;
    b[n].is_null = &i.dua_null;
    n++;

    // selected
    //
    composite_value_traits< ::Range, id_pgsql >::bind (
      b + n, i.selected_value, sk);
    n += 2UL;

    // all_labels
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.all_labels_value.data ();
    b[n].capacity = i.all_labels_value.capacity ();
    b[n].size = &i.all_labels_size;
    b[n].is_null = &i.all_labels_null;
    n++;
  }

  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DuaBytes, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // dua
    //
    {
      ::Dua const* const& v =
        o.dua;

      typedef object_traits< ::Dua > obj_traits;
      typedef odb::pointer_traits< ::Dua const* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.dua_value, is_null, id);
        i.dua_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // selected
    //
    {
      ::Range const& v =
        o.selected;

      composite_value_traits< ::Range, id_pgsql >::init (
        i.selected_value,
        v,
        sk);
    }

    // all_labels
    //
    {
      ::std::vector< unsigned int > const& v =
        o.all_labels;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.all_labels_value.capacity ());
      pgsql::value_traits<
          ::std::vector< unsigned int >,
          pgsql::id_string >::set_image (
        i.all_labels_value,
        size,
        is_null,
        v);
      i.all_labels_null = is_null;
      i.all_labels_size = size;
      grew = grew || (cap != i.all_labels_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // dua
    //
    {
      ::Dua const*& v =
        o.dua;

      typedef object_traits< ::Dua > obj_traits;
      typedef odb::pointer_traits< ::Dua const* > ptr_traits;

      if (i.dua_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.dua_value,
          i.dua_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // selected
    //
    {
      ::Range& v =
        o.selected;

      composite_value_traits< ::Range, id_pgsql >::init (
        v,
        i.selected_value,
        db);
    }

    // all_labels
    //
    {
      ::std::vector< unsigned int >& v =
        o.all_labels;

      pgsql::value_traits<
          ::std::vector< unsigned int >,
          pgsql::id_string >::set_value (
        v,
        i.all_labels_value,
        i.all_labels_size,
        i.all_labels_null);
    }
  }

  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::persist_statement[] =
  "INSERT INTO \"duabytes\" "
  "(\"id\", "
  "\"dua\", "
  "\"selected_low\", "
  "\"selected_high\", "
  "\"all_labels\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4::INTEGER[]) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::find_statement[] =
  "SELECT "
  "\"duabytes\".\"id\", "
  "\"duabytes\".\"dua\", "
  "\"duabytes\".\"selected_low\", "
  "\"duabytes\".\"selected_high\", "
  "\"duabytes\".\"all_labels\"::TEXT "
  "FROM \"duabytes\" "
  "WHERE \"duabytes\".\"id\"=$1";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::update_statement[] =
  "UPDATE \"duabytes\" "
  "SET "
  "\"dua\"=$1, "
  "\"selected_low\"=$2, "
  "\"selected_high\"=$3, "
  "\"all_labels\"=$4::INTEGER[] "
  "WHERE \"id\"=$5";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::erase_statement[] =
  "DELETE FROM \"duabytes\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"duabytes\".\"id\",\n"
  "\"duabytes\".\"dua\",\n"
  "\"duabytes\".\"selected_low\",\n"
  "\"duabytes\".\"selected_high\",\n"
  "\"duabytes\".\"all_labels\"::TEXT\n"
  "FROM \"duabytes\"\n"
  "LEFT JOIN \"dua\" AS \"dua\" ON \"dua\".\"id\"=\"duabytes\".\"dua\"";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"duabytes\"";

  const char access::object_traits_impl< ::DuaBytes, id_pgsql >::table_name[] =
  "\"duabytes\"";

  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DuaBytes, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DuaBytes, id_pgsql >::pointer_type
  access::object_traits_impl< ::DuaBytes, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DuaBytes, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DuaBytes, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DuaBytes, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DuaBytes, id_pgsql >::object_type >
  access::object_traits_impl< ::DuaBytes, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DuaBytes, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::DuaBytes, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        true,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::DuaBytes, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // AttackPoint
  //

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::
  persist_statement_name[] = "persist_attackpoint";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::
  find_statement_name[] = "find_attackpoint";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::
  update_statement_name[] = "update_attackpoint";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::
  erase_statement_name[] = "erase_attackpoint";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::
  query_statement_name[] = "query_attackpoint";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::
  erase_query_statement_name[] = "erase_query_attackpoint";

  const unsigned int access::object_traits_impl< ::AttackPoint, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid
  };

  const unsigned int access::object_traits_impl< ::AttackPoint, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::AttackPoint, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::AttackPoint, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::AttackPoint, id_pgsql >::id_type
  access::object_traits_impl< ::AttackPoint, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::AttackPoint, id_pgsql >::id_type
  access::object_traits_impl< ::AttackPoint, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::AttackPoint, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // loc
    //
    if (composite_value_traits< ::LavaASTLoc, id_pgsql >::grow (
          i.loc_value, t + 1UL))
      grew = true;

    // type
    //
    t[6UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // loc
    //
    composite_value_traits< ::LavaASTLoc, id_pgsql >::bind (
      b + n, i.loc_value, sk);
    n += 5UL;

    // type
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;
  }

  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::AttackPoint, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // loc
    //
    {
      ::LavaASTLoc const& v =
        o.loc;

      if (composite_value_traits< ::LavaASTLoc, id_pgsql >::init (
            i.loc_value,
            v,
            sk))
        grew = true;
    }

    // type
    //
    {
      ::AttackPoint::Type const& v =
        o.type;

      bool is_null (false);
      pgsql::value_traits<
          ::AttackPoint::Type,
          pgsql::id_integer >::set_image (
        i.type_value, is_null, v);
      i.type_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // loc
    //
    {
      ::LavaASTLoc& v =
        o.loc;

      composite_value_traits< ::LavaASTLoc, id_pgsql >::init (
        v,
        i.loc_value,
        db);
    }

    // type
    //
    {
      ::AttackPoint::Type& v =
        o.type;

      pgsql::value_traits<
          ::AttackPoint::Type,
          pgsql::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }
  }

  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::persist_statement[] =
  "INSERT INTO \"attackpoint\" "
  "(\"id\", "
  "\"loc_filename\", "
  "\"loc_begin_line\", "
  "\"loc_begin_column\", "
  "\"loc_end_line\", "
  "\"loc_end_column\", "
  "\"type\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::find_statement[] =
  "SELECT "
  "\"attackpoint\".\"id\", "
  "\"attackpoint\".\"loc_filename\", "
  "\"attackpoint\".\"loc_begin_line\", "
  "\"attackpoint\".\"loc_begin_column\", "
  "\"attackpoint\".\"loc_end_line\", "
  "\"attackpoint\".\"loc_end_column\", "
  "\"attackpoint\".\"type\" "
  "FROM \"attackpoint\" "
  "WHERE \"attackpoint\".\"id\"=$1";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::update_statement[] =
  "UPDATE \"attackpoint\" "
  "SET "
  "\"loc_filename\"=$1, "
  "\"loc_begin_line\"=$2, "
  "\"loc_begin_column\"=$3, "
  "\"loc_end_line\"=$4, "
  "\"loc_end_column\"=$5, "
  "\"type\"=$6 "
  "WHERE \"id\"=$7";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::erase_statement[] =
  "DELETE FROM \"attackpoint\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::query_statement[] =
  "SELECT "
  "\"attackpoint\".\"id\", "
  "\"attackpoint\".\"loc_filename\", "
  "\"attackpoint\".\"loc_begin_line\", "
  "\"attackpoint\".\"loc_begin_column\", "
  "\"attackpoint\".\"loc_end_line\", "
  "\"attackpoint\".\"loc_end_column\", "
  "\"attackpoint\".\"type\" "
  "FROM \"attackpoint\"";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"attackpoint\"";

  const char access::object_traits_impl< ::AttackPoint, id_pgsql >::table_name[] =
  "\"attackpoint\"";

  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::AttackPoint, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::AttackPoint, id_pgsql >::pointer_type
  access::object_traits_impl< ::AttackPoint, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::AttackPoint, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::AttackPoint, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::AttackPoint, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::AttackPoint, id_pgsql >::object_type >
  access::object_traits_impl< ::AttackPoint, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::AttackPoint, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::AttackPoint, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        false,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::AttackPoint, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // Bug
  //

  const char access::object_traits_impl< ::Bug, id_pgsql >::
  persist_statement_name[] = "persist_bug";

  const char access::object_traits_impl< ::Bug, id_pgsql >::
  find_statement_name[] = "find_bug";

  const char access::object_traits_impl< ::Bug, id_pgsql >::
  update_statement_name[] = "update_bug";

  const char access::object_traits_impl< ::Bug, id_pgsql >::
  erase_statement_name[] = "erase_bug";

  const char access::object_traits_impl< ::Bug, id_pgsql >::
  query_statement_name[] = "query_bug";

  const char access::object_traits_impl< ::Bug, id_pgsql >::
  erase_query_statement_name[] = "erase_query_bug";

  const unsigned int access::object_traits_impl< ::Bug, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::int4_oid
  };

  const unsigned int access::object_traits_impl< ::Bug, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::Bug, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::DuaBytes,
    id_pgsql,
    access::object_traits_impl< ::Bug, id_pgsql >::trigger_tag>::
  table_name[] = "\"trigger\"";

  const char alias_traits<  ::SourceLval,
    id_pgsql,
    access::object_traits_impl< ::Bug, id_pgsql >::trigger_lval_tag>::
  table_name[] = "\"trigger_lval\"";

  const char alias_traits<  ::AttackPoint,
    id_pgsql,
    access::object_traits_impl< ::Bug, id_pgsql >::atp_tag>::
  table_name[] = "\"atp\"";

  struct access::object_traits_impl< ::Bug, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::Bug, id_pgsql >::id_type
  access::object_traits_impl< ::Bug, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::Bug, id_pgsql >::id_type
  access::object_traits_impl< ::Bug, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Bug, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // type
    //
    t[1UL] = 0;

    // trigger
    //
    t[2UL] = 0;

    // trigger_lval
    //
    t[3UL] = 0;

    // atp
    //
    t[4UL] = 0;

    // max_liveness
    //
    t[5UL] = 0;

    // extra_duas
    //
    if (t[6UL])
    {
      i.extra_duas_value.capacity (i.extra_duas_size);
      grew = true;
    }

    // magic
    //
    t[7UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::Bug, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // type
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // trigger
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.trigger_value;
    b[n].is_null = &i.trigger_null;
    n++;

    // trigger_lval
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.trigger_lval_value;
    b[n].is_null = &i.trigger_lval_null;
    n++;

    // atp
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.atp_value;
    b[n].is_null = &i.atp_null;
    n++;

    // max_liveness
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.max_liveness_value;
    b[n].is_null = &i.max_liveness_null;
    n++;

    // extra_duas
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.extra_duas_value.data ();
    b[n].capacity = i.extra_duas_value.capacity ();
    b[n].size = &i.extra_duas_size;
    b[n].is_null = &i.extra_duas_null;
    n++;

    // magic
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.magic_value;
    b[n].is_null = &i.magic_null;
    n++;
  }

  void access::object_traits_impl< ::Bug, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Bug, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // type
    //
    {
      ::Bug::Type const& v =
        o.type;

      bool is_null (false);
      pgsql::value_traits<
          ::Bug::Type,
          pgsql::id_integer >::set_image (
        i.type_value, is_null, v);
      i.type_null = is_null;
    }

    // trigger
    //
    {
      ::DuaBytes const* const& v =
        o.trigger;

      typedef object_traits< ::DuaBytes > obj_traits;
      typedef odb::pointer_traits< ::DuaBytes const* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.trigger_value, is_null, id);
        i.trigger_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // trigger_lval
    //
    {
      ::SourceLval const* const& v =
        o.trigger_lval;

      typedef object_traits< ::SourceLval > obj_traits;
      typedef odb::pointer_traits< ::SourceLval const* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.trigger_lval_value, is_null, id);
        i.trigger_lval_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // atp
    //
    {
      ::AttackPoint const* const& v =
        o.atp;

      typedef object_traits< ::AttackPoint > obj_traits;
      typedef odb::pointer_traits< ::AttackPoint const* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.atp_value, is_null, id);
        i.atp_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // max_liveness
    //
    {
      ::uint64_t const& v =
        o.max_liveness;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.max_liveness_value, is_null, v);
      i.max_liveness_null = is_null;
    }

    // extra_duas
    //
    {
      ::std::vector< long unsigned int > const& v =
        o.extra_duas;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.extra_duas_value.capacity ());
      pgsql::value_traits<
          ::std::vector< long unsigned int >,
          pgsql::id_string >::set_image (
        i.extra_duas_value,
        size,
        is_null,
        v);
      i.extra_duas_null = is_null;
      i.extra_duas_size = size;
      grew = grew || (cap != i.extra_duas_value.capacity ());
    }

    // magic
    //
    {
      ::uint32_t const& v =
        o.magic;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.magic_value, is_null, v);
      i.magic_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::Bug, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // type
    //
    {
      ::Bug::Type& v =
        o.type;

      pgsql::value_traits<
          ::Bug::Type,
          pgsql::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // trigger
    //
    {
      ::DuaBytes const*& v =
        o.trigger;

      typedef object_traits< ::DuaBytes > obj_traits;
      typedef odb::pointer_traits< ::DuaBytes const* > ptr_traits;

      if (i.trigger_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.trigger_value,
          i.trigger_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // trigger_lval
    //
    {
      ::SourceLval const*& v =
        o.trigger_lval;

      typedef object_traits< ::SourceLval > obj_traits;
      typedef odb::pointer_traits< ::SourceLval const* > ptr_traits;

      if (i.trigger_lval_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.trigger_lval_value,
          i.trigger_lval_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // atp
    //
    {
      ::AttackPoint const*& v =
        o.atp;

      typedef object_traits< ::AttackPoint > obj_traits;
      typedef odb::pointer_traits< ::AttackPoint const* > ptr_traits;

      if (i.atp_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.atp_value,
          i.atp_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // max_liveness
    //
    {
      ::uint64_t& v =
        o.max_liveness;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.max_liveness_value,
        i.max_liveness_null);
    }

    // extra_duas
    //
    {
      ::std::vector< long unsigned int >& v =
        o.extra_duas;

      pgsql::value_traits<
          ::std::vector< long unsigned int >,
          pgsql::id_string >::set_value (
        v,
        i.extra_duas_value,
        i.extra_duas_size,
        i.extra_duas_null);
    }

    // magic
    //
    {
      ::uint32_t& v =
        o.magic;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.magic_value,
        i.magic_null);
    }
  }

  void access::object_traits_impl< ::Bug, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::Bug, id_pgsql >::persist_statement[] =
  "INSERT INTO \"bug\" "
  "(\"id\", "
  "\"type\", "
  "\"trigger\", "
  "\"trigger_lval\", "
  "\"atp\", "
  "\"max_liveness\", "
  "\"extra_duas\", "
  "\"magic\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6::BIGINT[], $7) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::Bug, id_pgsql >::find_statement[] =
  "SELECT "
  "\"bug\".\"id\", "
  "\"bug\".\"type\", "
  "\"bug\".\"trigger\", "
  "\"bug\".\"trigger_lval\", "
  "\"bug\".\"atp\", "
  "\"bug\".\"max_liveness\", "
  "\"bug\".\"extra_duas\"::TEXT, "
  "\"bug\".\"magic\" "
  "FROM \"bug\" "
  "WHERE \"bug\".\"id\"=$1";

  const char access::object_traits_impl< ::Bug, id_pgsql >::update_statement[] =
  "UPDATE \"bug\" "
  "SET "
  "\"type\"=$1, "
  "\"trigger\"=$2, "
  "\"trigger_lval\"=$3, "
  "\"atp\"=$4, "
  "\"max_liveness\"=$5, "
  "\"extra_duas\"=$6::BIGINT[], "
  "\"magic\"=$7 "
  "WHERE \"id\"=$8";

  const char access::object_traits_impl< ::Bug, id_pgsql >::erase_statement[] =
  "DELETE FROM \"bug\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::Bug, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"bug\".\"id\",\n"
  "\"bug\".\"type\",\n"
  "\"bug\".\"trigger\",\n"
  "\"bug\".\"trigger_lval\",\n"
  "\"bug\".\"atp\",\n"
  "\"bug\".\"max_liveness\",\n"
  "\"bug\".\"extra_duas\"::TEXT,\n"
  "\"bug\".\"magic\"\n"
  "FROM \"bug\"\n"
  "LEFT JOIN \"duabytes\" AS \"trigger\" ON \"trigger\".\"id\"=\"bug\".\"trigger\"\n"
  "LEFT JOIN \"sourcelval\" AS \"trigger_lval\" ON \"trigger_lval\".\"id\"=\"bug\".\"trigger_lval\"\n"
  "LEFT JOIN \"attackpoint\" AS \"atp\" ON \"atp\".\"id\"=\"bug\".\"atp\"";

  const char access::object_traits_impl< ::Bug, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"bug\"";

  const char access::object_traits_impl< ::Bug, id_pgsql >::table_name[] =
  "\"bug\"";

  void access::object_traits_impl< ::Bug, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Bug, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Bug, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Bug, id_pgsql >::pointer_type
  access::object_traits_impl< ::Bug, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Bug, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Bug, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Bug, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::Bug, id_pgsql >::object_type >
  access::object_traits_impl< ::Bug, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Bug, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Bug, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        true,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Bug, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // BugLval
  //

  const char access::view_traits_impl< ::BugLval, id_pgsql >::
  query_statement_name[] = "query_buglval";

  bool access::view_traits_impl< ::BugLval, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // trigger_lval
    //
    t[0UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::BugLval, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i)
  {
    using namespace pgsql;

    pgsql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // trigger_lval
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.trigger_lval_value;
    b[n].is_null = &i.trigger_lval_null;
    n++;
  }

  void access::view_traits_impl< ::BugLval, id_pgsql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // trigger_lval
    //
    {
      ::uint64_t& v =
        o.trigger_lval;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.trigger_lval_value,
        i.trigger_lval_null);
    }
  }

  access::view_traits_impl< ::BugLval, id_pgsql >::query_base_type
  access::view_traits_impl< ::BugLval, id_pgsql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT DISTINCT "
      "\"bug\".\"trigger_lval\" ");

    r += "FROM \"bug\"";

    query_base_type c (
      // From lava.hxx:427:5
      (q.empty () ? query_base_type::true_expr : q) + "ORDER BY" + query_columns::trigger_lval);

    c.optimize ();

    if (!c.empty ())
    {
      r += " ";
      r += c.clause_prefix ();
      r += c;
    }

    return r;
  }

  result< access::view_traits_impl< ::BugLval, id_pgsql >::view_type >
  access::view_traits_impl< ::BugLval, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        qs.clause (),
        false,
        true,
        qs.parameter_types (),
        qs.parameter_count (),
        qs.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) pgsql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::view_traits_impl< ::BugLval, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = query_statement (q);
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        r->query.clause (),
        false,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::view_traits_impl< ::BugLval, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::view_result_impl<view_type> (
        pq.query, st, sts, 0));
  }

  // Build
  //

  const char access::object_traits_impl< ::Build, id_pgsql >::
  persist_statement_name[] = "persist_build";

  const char access::object_traits_impl< ::Build, id_pgsql >::
  find_statement_name[] = "find_build";

  const char access::object_traits_impl< ::Build, id_pgsql >::
  update_statement_name[] = "update_build";

  const char access::object_traits_impl< ::Build, id_pgsql >::
  erase_statement_name[] = "erase_build";

  const char access::object_traits_impl< ::Build, id_pgsql >::
  query_statement_name[] = "query_build";

  const char access::object_traits_impl< ::Build, id_pgsql >::
  erase_query_statement_name[] = "erase_query_build";

  const unsigned int access::object_traits_impl< ::Build, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::bool_oid
  };

  const unsigned int access::object_traits_impl< ::Build, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::Build, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::Build, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< bugs_traits > bugs;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : bugs (c, id, idn, idt)
    {
    }
  };

  // bugs
  //

  const char access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  select_name[] = "select_build_bugs";

  const char access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  insert_name[] = "insert_build_bugs";

  const char access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  delete_name[] = "delete_build_bugs";

  const unsigned int access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const char access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  select_statement[] =
  "SELECT "
  "\"build_bugs\".\"index\", "
  "\"build_bugs\".\"value\" "
  "FROM \"build_bugs\" "
  "WHERE \"build_bugs\".\"object_id\"=$1 ORDER BY \"build_bugs\".\"index\"";

  const char access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  insert_statement[] =
  "INSERT INTO \"build_bugs\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value\") "
  "VALUES "
  "($1, $2, $3)";

  const char access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  delete_statement[] =
  "DELETE FROM \"build_bugs\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    t[1UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      typedef object_traits< ::Bug > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.value_value, is_null, id);
        i.value_null = is_null;
      }
      else
        throw null_pointer ();
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      typedef object_traits< ::Bug > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::Build, id_pgsql >::bugs_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::Build, id_pgsql >::id_type
  access::object_traits_impl< ::Build, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::Build, id_pgsql >::id_type
  access::object_traits_impl< ::Build, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Build, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // output
    //
    if (t[1UL])
    {
      i.output_value.capacity (i.output_size);
      grew = true;
    }

    // compile
    //
    t[2UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::Build, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // output
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.output_value.data ();
    b[n].capacity = i.output_value.capacity ();
    b[n].size = &i.output_size;
    b[n].is_null = &i.output_null;
    n++;

    // compile
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.compile_value;
    b[n].is_null = &i.compile_null;
    n++;
  }

  void access::object_traits_impl< ::Build, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Build, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // output
    //
    {
      ::std::string const& v =
        o.output;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.output_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.output_value,
        size,
        is_null,
        v);
      i.output_null = is_null;
      i.output_size = size;
      grew = grew || (cap != i.output_value.capacity ());
    }

    // compile
    //
    {
      bool const& v =
        o.compile;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.compile_value, is_null, v);
      i.compile_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::Build, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // output
    //
    {
      ::std::string& v =
        o.output;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.output_value,
        i.output_size,
        i.output_null);
    }

    // compile
    //
    {
      bool& v =
        o.compile;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.compile_value,
        i.compile_null);
    }
  }

  void access::object_traits_impl< ::Build, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::Build, id_pgsql >::persist_statement[] =
  "INSERT INTO \"build\" "
  "(\"id\", "
  "\"output\", "
  "\"compile\") "
  "VALUES "
  "(DEFAULT, $1, $2) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::Build, id_pgsql >::find_statement[] =
  "SELECT "
  "\"build\".\"id\", "
  "\"build\".\"output\", "
  "\"build\".\"compile\" "
  "FROM \"build\" "
  "WHERE \"build\".\"id\"=$1";

  const char access::object_traits_impl< ::Build, id_pgsql >::update_statement[] =
  "UPDATE \"build\" "
  "SET "
  "\"output\"=$1, "
  "\"compile\"=$2 "
  "WHERE \"id\"=$3";

  const char access::object_traits_impl< ::Build, id_pgsql >::erase_statement[] =
  "DELETE FROM \"build\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::Build, id_pgsql >::query_statement[] =
  "SELECT "
  "\"build\".\"id\", "
  "\"build\".\"output\", "
  "\"build\".\"compile\" "
  "FROM \"build\"";

  const char access::object_traits_impl< ::Build, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"build\"";

  const char access::object_traits_impl< ::Build, id_pgsql >::table_name[] =
  "\"build\"";

  void access::object_traits_impl< ::Build, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // bugs
    //
    {
      ::std::vector< const ::Bug* > const& v =
        obj.bugs;

      bugs_traits::persist (
        v,
        esc.bugs);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Build, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // bugs
    //
    {
      ::std::vector< const ::Bug* > const& v =
        obj.bugs;

      bugs_traits::update (
        v,
        esc.bugs);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Build, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // bugs
    //
    bugs_traits::erase (
      esc.bugs);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Build, id_pgsql >::pointer_type
  access::object_traits_impl< ::Build, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Build, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Build, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Build, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Build, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // bugs
    //
    {
      ::std::vector< const ::Bug* >& v =
        obj.bugs;

      bugs_traits::load (
        v,
        esc.bugs);
    }
  }

  result< access::object_traits_impl< ::Build, id_pgsql >::object_type >
  access::object_traits_impl< ::Build, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Build, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Build, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        false,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Build, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // Run
  //

  const char access::object_traits_impl< ::Run, id_pgsql >::
  persist_statement_name[] = "persist_run";

  const char access::object_traits_impl< ::Run, id_pgsql >::
  find_statement_name[] = "find_run";

  const char access::object_traits_impl< ::Run, id_pgsql >::
  update_statement_name[] = "update_run";

  const char access::object_traits_impl< ::Run, id_pgsql >::
  erase_statement_name[] = "erase_run";

  const char access::object_traits_impl< ::Run, id_pgsql >::
  query_statement_name[] = "query_run";

  const char access::object_traits_impl< ::Run, id_pgsql >::
  erase_query_statement_name[] = "erase_query_run";

  const unsigned int access::object_traits_impl< ::Run, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::bool_oid
  };

  const unsigned int access::object_traits_impl< ::Run, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::Run, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::bool_oid,
    pgsql::bool_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::Build,
    id_pgsql,
    access::object_traits_impl< ::Run, id_pgsql >::build_tag>::
  table_name[] = "\"build\"";

  const char alias_traits<  ::Bug,
    id_pgsql,
    access::object_traits_impl< ::Run, id_pgsql >::fuzzed_tag>::
  table_name[] = "\"fuzzed\"";

  struct access::object_traits_impl< ::Run, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::Run, id_pgsql >::id_type
  access::object_traits_impl< ::Run, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::Run, id_pgsql >::id_type
  access::object_traits_impl< ::Run, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Run, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // build
    //
    t[1UL] = 0;

    // fuzzed
    //
    t[2UL] = 0;

    // exitcode
    //
    t[3UL] = 0;

    // output
    //
    if (t[4UL])
    {
      i.output_value.capacity (i.output_size);
      grew = true;
    }

    // success
    //
    t[5UL] = 0;

    // validated
    //
    t[6UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::Run, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // build
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.build_value;
    b[n].is_null = &i.build_null;
    n++;

    // fuzzed
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.fuzzed_value;
    b[n].is_null = &i.fuzzed_null;
    n++;

    // exitcode
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.exitcode_value;
    b[n].is_null = &i.exitcode_null;
    n++;

    // output
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.output_value.data ();
    b[n].capacity = i.output_value.capacity ();
    b[n].size = &i.output_size;
    b[n].is_null = &i.output_null;
    n++;

    // success
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.success_value;
    b[n].is_null = &i.success_null;
    n++;

    // validated
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.validated_value;
    b[n].is_null = &i.validated_null;
    n++;
  }

  void access::object_traits_impl< ::Run, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Run, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // build
    //
    {
      ::Build const* const& v =
        o.build;

      typedef object_traits< ::Build > obj_traits;
      typedef odb::pointer_traits< ::Build const* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.build_value, is_null, id);
        i.build_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // fuzzed
    //
    {
      ::Bug const* const& v =
        o.fuzzed;

      typedef object_traits< ::Bug > obj_traits;
      typedef odb::pointer_traits< ::Bug const* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.fuzzed_value, is_null, id);
        i.fuzzed_null = is_null;
      }
      else
        i.fuzzed_null = true;
    }

    // exitcode
    //
    {
      int const& v =
        o.exitcode;

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.exitcode_value, is_null, v);
      i.exitcode_null = is_null;
    }

    // output
    //
    {
      ::std::string const& v =
        o.output;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.output_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.output_value,
        size,
        is_null,
        v);
      i.output_null = is_null;
      i.output_size = size;
      grew = grew || (cap != i.output_value.capacity ());
    }

    // success
    //
    {
      bool const& v =
        o.success;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.success_value, is_null, v);
      i.success_null = is_null;
    }

    // validated
    //
    {
      bool const& v =
        o.validated;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.validated_value, is_null, v);
      i.validated_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::Run, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // build
    //
    {
      ::Build const*& v =
        o.build;

      typedef object_traits< ::Build > obj_traits;
      typedef odb::pointer_traits< ::Build const* > ptr_traits;

      if (i.build_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.build_value,
          i.build_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // fuzzed
    //
    {
      ::Bug const*& v =
        o.fuzzed;

      typedef object_traits< ::Bug > obj_traits;
      typedef odb::pointer_traits< ::Bug const* > ptr_traits;

      if (i.fuzzed_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.fuzzed_value,
          i.fuzzed_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // exitcode
    //
    {
      int& v =
        o.exitcode;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.exitcode_value,
        i.exitcode_null);
    }

    // output
    //
    {
      ::std::string& v =
        o.output;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.output_value,
        i.output_size,
        i.output_null);
    }

    // success
    //
    {
      bool& v =
        o.success;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.success_value,
        i.success_null);
    }

    // validated
    //
    {
      bool& v =
        o.validated;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.validated_value,
        i.validated_null);
    }
  }

  void access::object_traits_impl< ::Run, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::Run, id_pgsql >::persist_statement[] =
  "INSERT INTO \"run\" "
  "(\"id\", "
  "\"build\", "
  "\"fuzzed\", "
  "\"exitcode\", "
  "\"output\", "
  "\"success\", "
  "\"validated\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::Run, id_pgsql >::find_statement[] =
  "SELECT "
  "\"run\".\"id\", "
  "\"run\".\"build\", "
  "\"run\".\"fuzzed\", "
  "\"run\".\"exitcode\", "
  "\"run\".\"output\", "
  "\"run\".\"success\", "
  "\"run\".\"validated\" "
  "FROM \"run\" "
  "WHERE \"run\".\"id\"=$1";

  const char access::object_traits_impl< ::Run, id_pgsql >::update_statement[] =
  "UPDATE \"run\" "
  "SET "
  "\"build\"=$1, "
  "\"fuzzed\"=$2, "
  "\"exitcode\"=$3, "
  "\"output\"=$4, "
  "\"success\"=$5, "
  "\"validated\"=$6 "
  "WHERE \"id\"=$7";

  const char access::object_traits_impl< ::Run, id_pgsql >::erase_statement[] =
  "DELETE FROM \"run\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::Run, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"run\".\"id\",\n"
  "\"run\".\"build\",\n"
  "\"run\".\"fuzzed\",\n"
  "\"run\".\"exitcode\",\n"
  "\"run\".\"output\",\n"
  "\"run\".\"success\",\n"
  "\"run\".\"validated\"\n"
  "FROM \"run\"\n"
  "LEFT JOIN \"build\" AS \"build\" ON \"build\".\"id\"=\"run\".\"build\"\n"
  "LEFT JOIN \"bug\" AS \"fuzzed\" ON \"fuzzed\".\"id\"=\"run\".\"fuzzed\"";

  const char access::object_traits_impl< ::Run, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"run\"";

  const char access::object_traits_impl< ::Run, id_pgsql >::table_name[] =
  "\"run\"";

  void access::object_traits_impl< ::Run, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Run, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Run, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Run, id_pgsql >::pointer_type
  access::object_traits_impl< ::Run, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Run, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Run, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Run, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::Run, id_pgsql >::object_type >
  access::object_traits_impl< ::Run, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Run, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Run, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        true,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Run, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // SourceFunction
  //

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::
  persist_statement_name[] = "persist_sourcefunction";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::
  find_statement_name[] = "find_sourcefunction";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::
  update_statement_name[] = "update_sourcefunction";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::
  erase_statement_name[] = "erase_sourcefunction";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::
  query_statement_name[] = "query_sourcefunction";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::
  erase_query_statement_name[] = "erase_query_sourcefunction";

  const unsigned int access::object_traits_impl< ::SourceFunction, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::SourceFunction, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::SourceFunction, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::SourceFunction, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::SourceFunction, id_pgsql >::id_type
  access::object_traits_impl< ::SourceFunction, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::SourceFunction, id_pgsql >::id_type
  access::object_traits_impl< ::SourceFunction, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::SourceFunction, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // loc
    //
    if (composite_value_traits< ::LavaASTLoc, id_pgsql >::grow (
          i.loc_value, t + 1UL))
      grew = true;

    // name
    //
    if (t[6UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // loc
    //
    composite_value_traits< ::LavaASTLoc, id_pgsql >::bind (
      b + n, i.loc_value, sk);
    n += 5UL;

    // name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;
  }

  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::SourceFunction, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // loc
    //
    {
      ::LavaASTLoc const& v =
        o.loc;

      if (composite_value_traits< ::LavaASTLoc, id_pgsql >::init (
            i.loc_value,
            v,
            sk))
        grew = true;
    }

    // name
    //
    {
      ::std::string const& v =
        o.name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // loc
    //
    {
      ::LavaASTLoc& v =
        o.loc;

      composite_value_traits< ::LavaASTLoc, id_pgsql >::init (
        v,
        i.loc_value,
        db);
    }

    // name
    //
    {
      ::std::string& v =
        o.name;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }
  }

  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::persist_statement[] =
  "INSERT INTO \"sourcefunction\" "
  "(\"id\", "
  "\"loc_filename\", "
  "\"loc_begin_line\", "
  "\"loc_begin_column\", "
  "\"loc_end_line\", "
  "\"loc_end_column\", "
  "\"name\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::find_statement[] =
  "SELECT "
  "\"sourcefunction\".\"id\", "
  "\"sourcefunction\".\"loc_filename\", "
  "\"sourcefunction\".\"loc_begin_line\", "
  "\"sourcefunction\".\"loc_begin_column\", "
  "\"sourcefunction\".\"loc_end_line\", "
  "\"sourcefunction\".\"loc_end_column\", "
  "\"sourcefunction\".\"name\" "
  "FROM \"sourcefunction\" "
  "WHERE \"sourcefunction\".\"id\"=$1";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::update_statement[] =
  "UPDATE \"sourcefunction\" "
  "SET "
  "\"loc_filename\"=$1, "
  "\"loc_begin_line\"=$2, "
  "\"loc_begin_column\"=$3, "
  "\"loc_end_line\"=$4, "
  "\"loc_end_column\"=$5, "
  "\"name\"=$6 "
  "WHERE \"id\"=$7";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::erase_statement[] =
  "DELETE FROM \"sourcefunction\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::query_statement[] =
  "SELECT "
  "\"sourcefunction\".\"id\", "
  "\"sourcefunction\".\"loc_filename\", "
  "\"sourcefunction\".\"loc_begin_line\", "
  "\"sourcefunction\".\"loc_begin_column\", "
  "\"sourcefunction\".\"loc_end_line\", "
  "\"sourcefunction\".\"loc_end_column\", "
  "\"sourcefunction\".\"name\" "
  "FROM \"sourcefunction\"";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"sourcefunction\"";

  const char access::object_traits_impl< ::SourceFunction, id_pgsql >::table_name[] =
  "\"sourcefunction\"";

  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::SourceFunction, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::SourceFunction, id_pgsql >::pointer_type
  access::object_traits_impl< ::SourceFunction, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::SourceFunction, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::SourceFunction, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::SourceFunction, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::SourceFunction, id_pgsql >::object_type >
  access::object_traits_impl< ::SourceFunction, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::SourceFunction, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::SourceFunction, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        false,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::SourceFunction, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // Call
  //

  const char access::object_traits_impl< ::Call, id_pgsql >::
  persist_statement_name[] = "persist_call";

  const char access::object_traits_impl< ::Call, id_pgsql >::
  find_statement_name[] = "find_call";

  const char access::object_traits_impl< ::Call, id_pgsql >::
  update_statement_name[] = "update_call";

  const char access::object_traits_impl< ::Call, id_pgsql >::
  erase_statement_name[] = "erase_call";

  const char access::object_traits_impl< ::Call, id_pgsql >::
  query_statement_name[] = "query_call";

  const char access::object_traits_impl< ::Call, id_pgsql >::
  erase_query_statement_name[] = "erase_query_call";

  const unsigned int access::object_traits_impl< ::Call, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::int4_oid
  };

  const unsigned int access::object_traits_impl< ::Call, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::Call, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::SourceFunction,
    id_pgsql,
    access::object_traits_impl< ::Call, id_pgsql >::called_function_tag>::
  table_name[] = "\"called_function\"";

  struct access::object_traits_impl< ::Call, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::Call, id_pgsql >::id_type
  access::object_traits_impl< ::Call, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::Call, id_pgsql >::id_type
  access::object_traits_impl< ::Call, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Call, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // call_instr
    //
    t[1UL] = 0;

    // ret_instr
    //
    t[2UL] = 0;

    // called_function
    //
    t[3UL] = 0;

    // callsite_file
    //
    if (t[4UL])
    {
      i.callsite_file_value.capacity (i.callsite_file_size);
      grew = true;
    }

    // callsite_line
    //
    t[5UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::Call, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // call_instr
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.call_instr_value;
    b[n].is_null = &i.call_instr_null;
    n++;

    // ret_instr
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.ret_instr_value;
    b[n].is_null = &i.ret_instr_null;
    n++;

    // called_function
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.called_function_value;
    b[n].is_null = &i.called_function_null;
    n++;

    // callsite_file
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.callsite_file_value.data ();
    b[n].capacity = i.callsite_file_value.capacity ();
    b[n].size = &i.callsite_file_size;
    b[n].is_null = &i.callsite_file_null;
    n++;

    // callsite_line
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.callsite_line_value;
    b[n].is_null = &i.callsite_line_null;
    n++;
  }

  void access::object_traits_impl< ::Call, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Call, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // call_instr
    //
    {
      ::uint64_t const& v =
        o.call_instr;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.call_instr_value, is_null, v);
      i.call_instr_null = is_null;
    }

    // ret_instr
    //
    {
      ::uint64_t const& v =
        o.ret_instr;

      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.ret_instr_value, is_null, v);
      i.ret_instr_null = is_null;
    }

    // called_function
    //
    {
      ::SourceFunction const* const& v =
        o.called_function;

      typedef object_traits< ::SourceFunction > obj_traits;
      typedef odb::pointer_traits< ::SourceFunction const* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.called_function_value, is_null, id);
        i.called_function_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // callsite_file
    //
    {
      ::std::string const& v =
        o.callsite_file;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.callsite_file_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.callsite_file_value,
        size,
        is_null,
        v);
      i.callsite_file_null = is_null;
      i.callsite_file_size = size;
      grew = grew || (cap != i.callsite_file_value.capacity ());
    }

    // callsite_line
    //
    {
      ::uint32_t const& v =
        o.callsite_line;

      bool is_null (false);
      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_image (
        i.callsite_line_value, is_null, v);
      i.callsite_line_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::Call, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::uint64_t& v =
        o.id;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // call_instr
    //
    {
      ::uint64_t& v =
        o.call_instr;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.call_instr_value,
        i.call_instr_null);
    }

    // ret_instr
    //
    {
      ::uint64_t& v =
        o.ret_instr;

      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_value (
        v,
        i.ret_instr_value,
        i.ret_instr_null);
    }

    // called_function
    //
    {
      ::SourceFunction const*& v =
        o.called_function;

      typedef object_traits< ::SourceFunction > obj_traits;
      typedef odb::pointer_traits< ::SourceFunction const* > ptr_traits;

      if (i.called_function_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.called_function_value,
          i.called_function_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // callsite_file
    //
    {
      ::std::string& v =
        o.callsite_file;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.callsite_file_value,
        i.callsite_file_size,
        i.callsite_file_null);
    }

    // callsite_line
    //
    {
      ::uint32_t& v =
        o.callsite_line;

      pgsql::value_traits<
          ::uint32_t,
          pgsql::id_integer >::set_value (
        v,
        i.callsite_line_value,
        i.callsite_line_null);
    }
  }

  void access::object_traits_impl< ::Call, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::uint64_t,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::Call, id_pgsql >::persist_statement[] =
  "INSERT INTO \"call\" "
  "(\"id\", "
  "\"call_instr\", "
  "\"ret_instr\", "
  "\"called_function\", "
  "\"callsite_file\", "
  "\"callsite_line\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::Call, id_pgsql >::find_statement[] =
  "SELECT "
  "\"call\".\"id\", "
  "\"call\".\"call_instr\", "
  "\"call\".\"ret_instr\", "
  "\"call\".\"called_function\", "
  "\"call\".\"callsite_file\", "
  "\"call\".\"callsite_line\" "
  "FROM \"call\" "
  "WHERE \"call\".\"id\"=$1";

  const char access::object_traits_impl< ::Call, id_pgsql >::update_statement[] =
  "UPDATE \"call\" "
  "SET "
  "\"call_instr\"=$1, "
  "\"ret_instr\"=$2, "
  "\"called_function\"=$3, "
  "\"callsite_file\"=$4, "
  "\"callsite_line\"=$5 "
  "WHERE \"id\"=$6";

  const char access::object_traits_impl< ::Call, id_pgsql >::erase_statement[] =
  "DELETE FROM \"call\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::Call, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"call\".\"id\",\n"
  "\"call\".\"call_instr\",\n"
  "\"call\".\"ret_instr\",\n"
  "\"call\".\"called_function\",\n"
  "\"call\".\"callsite_file\",\n"
  "\"call\".\"callsite_line\"\n"
  "FROM \"call\"\n"
  "LEFT JOIN \"sourcefunction\" AS \"called_function\" ON \"called_function\".\"id\"=\"call\".\"called_function\"";

  const char access::object_traits_impl< ::Call, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"call\"";

  const char access::object_traits_impl< ::Call, id_pgsql >::table_name[] =
  "\"call\"";

  void access::object_traits_impl< ::Call, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Call, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Call, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Call, id_pgsql >::pointer_type
  access::object_traits_impl< ::Call, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Call, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Call, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Call, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::Call, id_pgsql >::object_type >
  access::object_traits_impl< ::Call, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Call, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Call, id_pgsql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      static_cast<pgsql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    shared_ptr<pgsql::prepared_query_impl> r (
      new (shared) pgsql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        sts.connection (),
        n,
        text,
        true,
        true,
        r->query.parameter_types (),
        r->query.parameter_count (),
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Call, id_pgsql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::prepared_query_impl& pq (
      static_cast<pgsql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) pgsql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }
}

#include <odb/post.hxx>
